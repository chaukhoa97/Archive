#1. Interface & Inline fragments
interface Node {
  # "!" -> non null
  id: ID!
}

type Product implements Node {
  # Product phải có `id` vì implements từ `Node`
  id: ID!
  title: String!
  vendor: String!
  description: String
}

type Collection implements Node {
  id: ID!
  #* "first" là 1 arg của `products`, có `type` là "Product"; "3" là `default value`
  products(first: Int! = 3): [Product]
}

#1 GraphQL Types
#2 "Scalar Type": String, Int, Float, Boolean, ID -> can't have sub-fields like Array or Object.
# Chúng ta có thể tự khai báo Scalar Type ví dụ ntn:
scalar Episode

#2 "Object Type": Object, Interface, Union, Enum, Input type

#3 Input type: Giống với object bình thường, chỉ khác là dc dùng trong các `Operation` (ở đây ReviewInput dc dùng ở `createReview` line 41)
input ReviewInput {
  stars: Int!
  commentary: String
}

#1 Operations: Query, Mutation, Subscription
type Query {
  #! Trong Query có `node` -> Có thể dùng khi `query` - Xem file `operation.graphql` (line 13)
  node(id: ID!): Node
}
type Mutation {
  #! Trong Mutation có `createReview` -> Có thể dùng khi `mutation` - Xem file `operation.graphql` (line 4)
  createReview(episode: Episode!, review: ReviewInput!): String
}
